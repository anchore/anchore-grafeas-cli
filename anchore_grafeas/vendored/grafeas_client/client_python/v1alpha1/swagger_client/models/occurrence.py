# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Occurrence(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, resource_url=None, note_name=None, kind=None, custom_details=None, vulnerability_details=None, build_details=None, derived_image=None, installation=None, deployment=None, discovered=None, attestation=None, remediation=None, create_time=None, update_time=None, operation_name=None):
        """
        Occurrence - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'resource_url': 'str',
            'note_name': 'str',
            'kind': 'str',
            'custom_details': 'CustomDetails',
            'vulnerability_details': 'VulnerabilityDetails',
            'build_details': 'BuildDetails',
            'derived_image': 'Derived',
            'installation': 'Installation',
            'deployment': 'Deployment',
            'discovered': 'Discovered',
            'attestation': 'Attestation',
            'remediation': 'str',
            'create_time': 'str',
            'update_time': 'str',
            'operation_name': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'resource_url': 'resourceUrl',
            'note_name': 'noteName',
            'kind': 'kind',
            'custom_details': 'customDetails',
            'vulnerability_details': 'vulnerabilityDetails',
            'build_details': 'buildDetails',
            'derived_image': 'derivedImage',
            'installation': 'installation',
            'deployment': 'deployment',
            'discovered': 'discovered',
            'attestation': 'attestation',
            'remediation': 'remediation',
            'create_time': 'createTime',
            'update_time': 'updateTime',
            'operation_name': 'operationName'
        }

        self._name = name
        self._resource_url = resource_url
        self._note_name = note_name
        self._kind = kind
        self._custom_details = custom_details
        self._vulnerability_details = vulnerability_details
        self._build_details = build_details
        self._derived_image = derived_image
        self._installation = installation
        self._deployment = deployment
        self._discovered = discovered
        self._attestation = attestation
        self._remediation = remediation
        self._create_time = create_time
        self._update_time = update_time
        self._operation_name = operation_name

    @property
    def name(self):
        """
        Gets the name of this Occurrence.
        The name of the occurrence in the form \"projects/{project_id}/occurrences/{occurrence_id}\" @OutputOnly

        :return: The name of this Occurrence.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Occurrence.
        The name of the occurrence in the form \"projects/{project_id}/occurrences/{occurrence_id}\" @OutputOnly

        :param name: The name of this Occurrence.
        :type: str
        """

        self._name = name

    @property
    def resource_url(self):
        """
        Gets the resource_url of this Occurrence.
        The unique url of the image or container for which the occurrence applies. Example: https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.

        :return: The resource_url of this Occurrence.
        :rtype: str
        """
        return self._resource_url

    @resource_url.setter
    def resource_url(self, resource_url):
        """
        Sets the resource_url of this Occurrence.
        The unique url of the image or container for which the occurrence applies. Example: https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.

        :param resource_url: The resource_url of this Occurrence.
        :type: str
        """

        self._resource_url = resource_url

    @property
    def note_name(self):
        """
        Gets the note_name of this Occurrence.
        An analysis note associated with this image, in the form \"projects/{project_id}/notes/{note_id}\" This field can be used as a filter in list requests.

        :return: The note_name of this Occurrence.
        :rtype: str
        """
        return self._note_name

    @note_name.setter
    def note_name(self, note_name):
        """
        Sets the note_name of this Occurrence.
        An analysis note associated with this image, in the form \"projects/{project_id}/notes/{note_id}\" This field can be used as a filter in list requests.

        :param note_name: The note_name of this Occurrence.
        :type: str
        """

        self._note_name = note_name

    @property
    def kind(self):
        """
        Gets the kind of this Occurrence.
        This explicitly denotes which of the occurrence details is specified. This field can be used as a filter in list requests. @OutputOnly

        :return: The kind of this Occurrence.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """
        Sets the kind of this Occurrence.
        This explicitly denotes which of the occurrence details is specified. This field can be used as a filter in list requests. @OutputOnly

        :param kind: The kind of this Occurrence.
        :type: str
        """
        allowed_values = ["CUSTOM", "PACKAGE_VULNERABILITY", "BUILD_DETAILS", "IMAGE_BASIS", "PACKAGE_MANAGER", "DEPLOYABLE", "DISCOVERY"]
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def custom_details(self):
        """
        Gets the custom_details of this Occurrence.
        Details of the custom note.

        :return: The custom_details of this Occurrence.
        :rtype: CustomDetails
        """
        return self._custom_details

    @custom_details.setter
    def custom_details(self, custom_details):
        """
        Sets the custom_details of this Occurrence.
        Details of the custom note.

        :param custom_details: The custom_details of this Occurrence.
        :type: CustomDetails
        """

        self._custom_details = custom_details

    @property
    def vulnerability_details(self):
        """
        Gets the vulnerability_details of this Occurrence.
        Details of a security vulnerability note.

        :return: The vulnerability_details of this Occurrence.
        :rtype: VulnerabilityDetails
        """
        return self._vulnerability_details

    @vulnerability_details.setter
    def vulnerability_details(self, vulnerability_details):
        """
        Sets the vulnerability_details of this Occurrence.
        Details of a security vulnerability note.

        :param vulnerability_details: The vulnerability_details of this Occurrence.
        :type: VulnerabilityDetails
        """

        self._vulnerability_details = vulnerability_details

    @property
    def build_details(self):
        """
        Gets the build_details of this Occurrence.
        Build details for a verifiable build.

        :return: The build_details of this Occurrence.
        :rtype: BuildDetails
        """
        return self._build_details

    @build_details.setter
    def build_details(self, build_details):
        """
        Sets the build_details of this Occurrence.
        Build details for a verifiable build.

        :param build_details: The build_details of this Occurrence.
        :type: BuildDetails
        """

        self._build_details = build_details

    @property
    def derived_image(self):
        """
        Gets the derived_image of this Occurrence.
        Describes how this resource derives from the basis in the associated note.

        :return: The derived_image of this Occurrence.
        :rtype: Derived
        """
        return self._derived_image

    @derived_image.setter
    def derived_image(self, derived_image):
        """
        Sets the derived_image of this Occurrence.
        Describes how this resource derives from the basis in the associated note.

        :param derived_image: The derived_image of this Occurrence.
        :type: Derived
        """

        self._derived_image = derived_image

    @property
    def installation(self):
        """
        Gets the installation of this Occurrence.
        Describes the installation of a package on the linked resource.

        :return: The installation of this Occurrence.
        :rtype: Installation
        """
        return self._installation

    @installation.setter
    def installation(self, installation):
        """
        Sets the installation of this Occurrence.
        Describes the installation of a package on the linked resource.

        :param installation: The installation of this Occurrence.
        :type: Installation
        """

        self._installation = installation

    @property
    def deployment(self):
        """
        Gets the deployment of this Occurrence.
        Describes the deployment of an artifact on a runtime.

        :return: The deployment of this Occurrence.
        :rtype: Deployment
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """
        Sets the deployment of this Occurrence.
        Describes the deployment of an artifact on a runtime.

        :param deployment: The deployment of this Occurrence.
        :type: Deployment
        """

        self._deployment = deployment

    @property
    def discovered(self):
        """
        Gets the discovered of this Occurrence.
        Describes the initial scan status for this resource.

        :return: The discovered of this Occurrence.
        :rtype: Discovered
        """
        return self._discovered

    @discovered.setter
    def discovered(self, discovered):
        """
        Sets the discovered of this Occurrence.
        Describes the initial scan status for this resource.

        :param discovered: The discovered of this Occurrence.
        :type: Discovered
        """

        self._discovered = discovered

    @property
    def attestation(self):
        """
        Gets the attestation of this Occurrence.
        Describes an attestation of an artifact.

        :return: The attestation of this Occurrence.
        :rtype: Attestation
        """
        return self._attestation

    @attestation.setter
    def attestation(self, attestation):
        """
        Sets the attestation of this Occurrence.
        Describes an attestation of an artifact.

        :param attestation: The attestation of this Occurrence.
        :type: Attestation
        """

        self._attestation = attestation

    @property
    def remediation(self):
        """
        Gets the remediation of this Occurrence.
        A description of actions that can be taken to remedy the note

        :return: The remediation of this Occurrence.
        :rtype: str
        """
        return self._remediation

    @remediation.setter
    def remediation(self, remediation):
        """
        Sets the remediation of this Occurrence.
        A description of actions that can be taken to remedy the note

        :param remediation: The remediation of this Occurrence.
        :type: str
        """

        self._remediation = remediation

    @property
    def create_time(self):
        """
        Gets the create_time of this Occurrence.
        The time this occurrence was created. @OutputOnly

        :return: The create_time of this Occurrence.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this Occurrence.
        The time this occurrence was created. @OutputOnly

        :param create_time: The create_time of this Occurrence.
        :type: str
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """
        Gets the update_time of this Occurrence.
        The time this occurrence was last updated. @OutputOnly

        :return: The update_time of this Occurrence.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """
        Sets the update_time of this Occurrence.
        The time this occurrence was last updated. @OutputOnly

        :param update_time: The update_time of this Occurrence.
        :type: str
        """

        self._update_time = update_time

    @property
    def operation_name(self):
        """
        Gets the operation_name of this Occurrence.
        The name of the operation that created this note.

        :return: The operation_name of this Occurrence.
        :rtype: str
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """
        Sets the operation_name of this Occurrence.
        The name of the operation that created this note.

        :param operation_name: The operation_name of this Occurrence.
        :type: str
        """

        self._operation_name = operation_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
