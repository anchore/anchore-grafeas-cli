# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Note(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, short_description=None, long_description=None, kind=None, vulnerability_type=None, build_type=None, base_image=None, package=None, deployable=None, discovery=None, attestation_authority=None, related_url=None, expiration_time=None, create_time=None, update_time=None, operation_name=None, related_note_names=None):
        """
        Note - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'short_description': 'str',
            'long_description': 'str',
            'kind': 'str',
            'vulnerability_type': 'VulnerabilityType',
            'build_type': 'BuildType',
            'base_image': 'Basis',
            'package': 'Package',
            'deployable': 'Deployable',
            'discovery': 'Discovery',
            'attestation_authority': 'AttestationAuthority',
            'related_url': 'list[RelatedUrl]',
            'expiration_time': 'str',
            'create_time': 'str',
            'update_time': 'str',
            'operation_name': 'str',
            'related_note_names': 'list[str]'
        }

        self.attribute_map = {
            'name': 'name',
            'short_description': 'shortDescription',
            'long_description': 'longDescription',
            'kind': 'kind',
            'vulnerability_type': 'vulnerabilityType',
            'build_type': 'buildType',
            'base_image': 'baseImage',
            'package': 'package',
            'deployable': 'deployable',
            'discovery': 'discovery',
            'attestation_authority': 'attestationAuthority',
            'related_url': 'relatedUrl',
            'expiration_time': 'expirationTime',
            'create_time': 'createTime',
            'update_time': 'updateTime',
            'operation_name': 'operationName',
            'related_note_names': 'relatedNoteNames'
        }

        self._name = name
        self._short_description = short_description
        self._long_description = long_description
        self._kind = kind
        self._vulnerability_type = vulnerability_type
        self._build_type = build_type
        self._base_image = base_image
        self._package = package
        self._deployable = deployable
        self._discovery = discovery
        self._attestation_authority = attestation_authority
        self._related_url = related_url
        self._expiration_time = expiration_time
        self._create_time = create_time
        self._update_time = update_time
        self._operation_name = operation_name
        self._related_note_names = related_note_names

    @property
    def name(self):
        """
        Gets the name of this Note.
        The name of the note in the form \"projects/{project_id}/notes/{note_id}\"

        :return: The name of this Note.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Note.
        The name of the note in the form \"projects/{project_id}/notes/{note_id}\"

        :param name: The name of this Note.
        :type: str
        """

        self._name = name

    @property
    def short_description(self):
        """
        Gets the short_description of this Note.
        A one sentence description of this note

        :return: The short_description of this Note.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """
        Sets the short_description of this Note.
        A one sentence description of this note

        :param short_description: The short_description of this Note.
        :type: str
        """

        self._short_description = short_description

    @property
    def long_description(self):
        """
        Gets the long_description of this Note.
        A detailed description of this note

        :return: The long_description of this Note.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """
        Sets the long_description of this Note.
        A detailed description of this note

        :param long_description: The long_description of this Note.
        :type: str
        """

        self._long_description = long_description

    @property
    def kind(self):
        """
        Gets the kind of this Note.
        This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests. @OutputOnly

        :return: The kind of this Note.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """
        Sets the kind of this Note.
        This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests. @OutputOnly

        :param kind: The kind of this Note.
        :type: str
        """
        allowed_values = ["CUSTOM", "PACKAGE_VULNERABILITY", "BUILD_DETAILS", "IMAGE_BASIS", "PACKAGE_MANAGER", "DEPLOYABLE", "DISCOVERY", "ATTESTATION_AUTHORITY"]
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def vulnerability_type(self):
        """
        Gets the vulnerability_type of this Note.
        A package vulnerability type of note.

        :return: The vulnerability_type of this Note.
        :rtype: VulnerabilityType
        """
        return self._vulnerability_type

    @vulnerability_type.setter
    def vulnerability_type(self, vulnerability_type):
        """
        Sets the vulnerability_type of this Note.
        A package vulnerability type of note.

        :param vulnerability_type: The vulnerability_type of this Note.
        :type: VulnerabilityType
        """

        self._vulnerability_type = vulnerability_type

    @property
    def build_type(self):
        """
        Gets the build_type of this Note.
        Build provenance type for a verifiable build.

        :return: The build_type of this Note.
        :rtype: BuildType
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """
        Sets the build_type of this Note.
        Build provenance type for a verifiable build.

        :param build_type: The build_type of this Note.
        :type: BuildType
        """

        self._build_type = build_type

    @property
    def base_image(self):
        """
        Gets the base_image of this Note.
        A note describing a base image.

        :return: The base_image of this Note.
        :rtype: Basis
        """
        return self._base_image

    @base_image.setter
    def base_image(self, base_image):
        """
        Sets the base_image of this Note.
        A note describing a base image.

        :param base_image: The base_image of this Note.
        :type: Basis
        """

        self._base_image = base_image

    @property
    def package(self):
        """
        Gets the package of this Note.
        A note describing a package hosted by various package managers.

        :return: The package of this Note.
        :rtype: Package
        """
        return self._package

    @package.setter
    def package(self, package):
        """
        Sets the package of this Note.
        A note describing a package hosted by various package managers.

        :param package: The package of this Note.
        :type: Package
        """

        self._package = package

    @property
    def deployable(self):
        """
        Gets the deployable of this Note.
        A note describing something that can be deployed.

        :return: The deployable of this Note.
        :rtype: Deployable
        """
        return self._deployable

    @deployable.setter
    def deployable(self, deployable):
        """
        Sets the deployable of this Note.
        A note describing something that can be deployed.

        :param deployable: The deployable of this Note.
        :type: Deployable
        """

        self._deployable = deployable

    @property
    def discovery(self):
        """
        Gets the discovery of this Note.
        A note describing a project/analysis type.

        :return: The discovery of this Note.
        :rtype: Discovery
        """
        return self._discovery

    @discovery.setter
    def discovery(self, discovery):
        """
        Sets the discovery of this Note.
        A note describing a project/analysis type.

        :param discovery: The discovery of this Note.
        :type: Discovery
        """

        self._discovery = discovery

    @property
    def attestation_authority(self):
        """
        Gets the attestation_authority of this Note.
        A note describing an attestation role.

        :return: The attestation_authority of this Note.
        :rtype: AttestationAuthority
        """
        return self._attestation_authority

    @attestation_authority.setter
    def attestation_authority(self, attestation_authority):
        """
        Sets the attestation_authority of this Note.
        A note describing an attestation role.

        :param attestation_authority: The attestation_authority of this Note.
        :type: AttestationAuthority
        """

        self._attestation_authority = attestation_authority

    @property
    def related_url(self):
        """
        Gets the related_url of this Note.
        Urls associated with this note

        :return: The related_url of this Note.
        :rtype: list[RelatedUrl]
        """
        return self._related_url

    @related_url.setter
    def related_url(self, related_url):
        """
        Sets the related_url of this Note.
        Urls associated with this note

        :param related_url: The related_url of this Note.
        :type: list[RelatedUrl]
        """

        self._related_url = related_url

    @property
    def expiration_time(self):
        """
        Gets the expiration_time of this Note.
        Time of expiration for this Note, null if Note currently does not expire.

        :return: The expiration_time of this Note.
        :rtype: str
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """
        Sets the expiration_time of this Note.
        Time of expiration for this Note, null if Note currently does not expire.

        :param expiration_time: The expiration_time of this Note.
        :type: str
        """

        self._expiration_time = expiration_time

    @property
    def create_time(self):
        """
        Gets the create_time of this Note.
        The time this note was created. This field can be used as a filter in list requests. @OutputOnly

        :return: The create_time of this Note.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this Note.
        The time this note was created. This field can be used as a filter in list requests. @OutputOnly

        :param create_time: The create_time of this Note.
        :type: str
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """
        Gets the update_time of this Note.
        The time this note was last updated. This field can be used as a filter in list requests. @OutputOnly

        :return: The update_time of this Note.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """
        Sets the update_time of this Note.
        The time this note was last updated. This field can be used as a filter in list requests. @OutputOnly

        :param update_time: The update_time of this Note.
        :type: str
        """

        self._update_time = update_time

    @property
    def operation_name(self):
        """
        Gets the operation_name of this Note.
        The name of the operation that created this note.

        :return: The operation_name of this Note.
        :rtype: str
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """
        Sets the operation_name of this Note.
        The name of the operation that created this note.

        :param operation_name: The operation_name of this Note.
        :type: str
        """

        self._operation_name = operation_name

    @property
    def related_note_names(self):
        """
        Gets the related_note_names of this Note.
        Other notes related to this note.

        :return: The related_note_names of this Note.
        :rtype: list[str]
        """
        return self._related_note_names

    @related_note_names.setter
    def related_note_names(self, related_note_names):
        """
        Sets the related_note_names of this Note.
        Other notes related to this note.

        :param related_note_names: The related_note_names of this Note.
        :type: list[str]
        """

        self._related_note_names = related_note_names

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
