# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class GerritSourceContext(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, host_uri=None, gerrit_project=None, revision_id=None, alias_name=None, alias_context=None):
        """
        GerritSourceContext - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'host_uri': 'str',
            'gerrit_project': 'str',
            'revision_id': 'str',
            'alias_name': 'str',
            'alias_context': 'AliasContext'
        }

        self.attribute_map = {
            'host_uri': 'hostUri',
            'gerrit_project': 'gerritProject',
            'revision_id': 'revisionId',
            'alias_name': 'aliasName',
            'alias_context': 'aliasContext'
        }

        self._host_uri = host_uri
        self._gerrit_project = gerrit_project
        self._revision_id = revision_id
        self._alias_name = alias_name
        self._alias_context = alias_context

    @property
    def host_uri(self):
        """
        Gets the host_uri of this GerritSourceContext.
        The URI of a running Gerrit instance.

        :return: The host_uri of this GerritSourceContext.
        :rtype: str
        """
        return self._host_uri

    @host_uri.setter
    def host_uri(self, host_uri):
        """
        Sets the host_uri of this GerritSourceContext.
        The URI of a running Gerrit instance.

        :param host_uri: The host_uri of this GerritSourceContext.
        :type: str
        """

        self._host_uri = host_uri

    @property
    def gerrit_project(self):
        """
        Gets the gerrit_project of this GerritSourceContext.
        The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is hostURI/project.

        :return: The gerrit_project of this GerritSourceContext.
        :rtype: str
        """
        return self._gerrit_project

    @gerrit_project.setter
    def gerrit_project(self, gerrit_project):
        """
        Sets the gerrit_project of this GerritSourceContext.
        The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is hostURI/project.

        :param gerrit_project: The gerrit_project of this GerritSourceContext.
        :type: str
        """

        self._gerrit_project = gerrit_project

    @property
    def revision_id(self):
        """
        Gets the revision_id of this GerritSourceContext.
        A revision (commit) ID.

        :return: The revision_id of this GerritSourceContext.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """
        Sets the revision_id of this GerritSourceContext.
        A revision (commit) ID.

        :param revision_id: The revision_id of this GerritSourceContext.
        :type: str
        """

        self._revision_id = revision_id

    @property
    def alias_name(self):
        """
        Gets the alias_name of this GerritSourceContext.
        The name of an alias (branch, tag, etc.).

        :return: The alias_name of this GerritSourceContext.
        :rtype: str
        """
        return self._alias_name

    @alias_name.setter
    def alias_name(self, alias_name):
        """
        Sets the alias_name of this GerritSourceContext.
        The name of an alias (branch, tag, etc.).

        :param alias_name: The alias_name of this GerritSourceContext.
        :type: str
        """

        self._alias_name = alias_name

    @property
    def alias_context(self):
        """
        Gets the alias_context of this GerritSourceContext.
        An alias, which may be a branch or tag.

        :return: The alias_context of this GerritSourceContext.
        :rtype: AliasContext
        """
        return self._alias_context

    @alias_context.setter
    def alias_context(self, alias_context):
        """
        Sets the alias_context of this GerritSourceContext.
        An alias, which may be a branch or tag.

        :param alias_context: The alias_context of this GerritSourceContext.
        :type: AliasContext
        """

        self._alias_context = alias_context

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
