# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Derived(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, fingerprint=None, distance=None, layer_info=None, base_resource_url=None):
        """
        Derived - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'fingerprint': 'Fingerprint',
            'distance': 'int',
            'layer_info': 'list[Layer]',
            'base_resource_url': 'str'
        }

        self.attribute_map = {
            'fingerprint': 'fingerprint',
            'distance': 'distance',
            'layer_info': 'layerInfo',
            'base_resource_url': 'baseResourceUrl'
        }

        self._fingerprint = fingerprint
        self._distance = distance
        self._layer_info = layer_info
        self._base_resource_url = base_resource_url

    @property
    def fingerprint(self):
        """
        Gets the fingerprint of this Derived.
        The fingerprint of the derived image

        :return: The fingerprint of this Derived.
        :rtype: Fingerprint
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """
        Sets the fingerprint of this Derived.
        The fingerprint of the derived image

        :param fingerprint: The fingerprint of this Derived.
        :type: Fingerprint
        """

        self._fingerprint = fingerprint

    @property
    def distance(self):
        """
        Gets the distance of this Derived.
        The number of layers by which this image differs from the associated image basis. @OutputOnly

        :return: The distance of this Derived.
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """
        Sets the distance of this Derived.
        The number of layers by which this image differs from the associated image basis. @OutputOnly

        :param distance: The distance of this Derived.
        :type: int
        """

        self._distance = distance

    @property
    def layer_info(self):
        """
        Gets the layer_info of this Derived.
        This contains layer-specific metadata, if populated it has length “distance” and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.

        :return: The layer_info of this Derived.
        :rtype: list[Layer]
        """
        return self._layer_info

    @layer_info.setter
    def layer_info(self, layer_info):
        """
        Sets the layer_info of this Derived.
        This contains layer-specific metadata, if populated it has length “distance” and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.

        :param layer_info: The layer_info of this Derived.
        :type: list[Layer]
        """

        self._layer_info = layer_info

    @property
    def base_resource_url(self):
        """
        Gets the base_resource_url of this Derived.
        This contains the base image url for the derived image Occurrence @OutputOnly

        :return: The base_resource_url of this Derived.
        :rtype: str
        """
        return self._base_resource_url

    @base_resource_url.setter
    def base_resource_url(self, base_resource_url):
        """
        Sets the base_resource_url of this Derived.
        This contains the base image url for the derived image Occurrence @OutputOnly

        :param base_resource_url: The base_resource_url of this Derived.
        :type: str
        """

        self._base_resource_url = base_resource_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
