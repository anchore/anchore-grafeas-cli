# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class VulnerabilityDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, affected_location=None, fixed_location=None, type=None, severity=None, cvss_score=None, package_issue=None):
        """
        VulnerabilityDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'affected_location': 'VulnerabilityLocation',
            'fixed_location': 'VulnerabilityLocation',
            'type': 'str',
            'severity': 'str',
            'cvss_score': 'float',
            'package_issue': 'list[PackageIssue]'
        }

        self.attribute_map = {
            'affected_location': 'affectedLocation',
            'fixed_location': 'fixedLocation',
            'type': 'type',
            'severity': 'severity',
            'cvss_score': 'cvssScore',
            'package_issue': 'packageIssue'
        }

        self._affected_location = affected_location
        self._fixed_location = fixed_location
        self._type = type
        self._severity = severity
        self._cvss_score = cvss_score
        self._package_issue = package_issue

    @property
    def affected_location(self):
        """
        Gets the affected_location of this VulnerabilityDetails.
        The location of the vulnerability.

        :return: The affected_location of this VulnerabilityDetails.
        :rtype: VulnerabilityLocation
        """
        return self._affected_location

    @affected_location.setter
    def affected_location(self, affected_location):
        """
        Sets the affected_location of this VulnerabilityDetails.
        The location of the vulnerability.

        :param affected_location: The affected_location of this VulnerabilityDetails.
        :type: VulnerabilityLocation
        """

        self._affected_location = affected_location

    @property
    def fixed_location(self):
        """
        Gets the fixed_location of this VulnerabilityDetails.
        The location of the available fix for vulnerability.

        :return: The fixed_location of this VulnerabilityDetails.
        :rtype: VulnerabilityLocation
        """
        return self._fixed_location

    @fixed_location.setter
    def fixed_location(self, fixed_location):
        """
        Sets the fixed_location of this VulnerabilityDetails.
        The location of the available fix for vulnerability.

        :param fixed_location: The fixed_location of this VulnerabilityDetails.
        :type: VulnerabilityLocation
        """

        self._fixed_location = fixed_location

    @property
    def type(self):
        """
        Gets the type of this VulnerabilityDetails.
        The type of package; whether native or non native(ruby gems, node.js packages etc)

        :return: The type of this VulnerabilityDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this VulnerabilityDetails.
        The type of package; whether native or non native(ruby gems, node.js packages etc)

        :param type: The type of this VulnerabilityDetails.
        :type: str
        """

        self._type = type

    @property
    def severity(self):
        """
        Gets the severity of this VulnerabilityDetails.
        The note provider assigned Severity of the vulnerability. @OutputOnly

        :return: The severity of this VulnerabilityDetails.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """
        Sets the severity of this VulnerabilityDetails.
        The note provider assigned Severity of the vulnerability. @OutputOnly

        :param severity: The severity of this VulnerabilityDetails.
        :type: str
        """
        allowed_values = ["UNKNOWN", "MINIMAL", "LOW", "MEDIUM", "HIGH", "CRITICAL"]
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def cvss_score(self):
        """
        Gets the cvss_score of this VulnerabilityDetails.
        The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity. @OutputOnly

        :return: The cvss_score of this VulnerabilityDetails.
        :rtype: float
        """
        return self._cvss_score

    @cvss_score.setter
    def cvss_score(self, cvss_score):
        """
        Sets the cvss_score of this VulnerabilityDetails.
        The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity. @OutputOnly

        :param cvss_score: The cvss_score of this VulnerabilityDetails.
        :type: float
        """

        self._cvss_score = cvss_score

    @property
    def package_issue(self):
        """
        Gets the package_issue of this VulnerabilityDetails.
        The set of affected locations and their fixes (if available) within the associated resource.

        :return: The package_issue of this VulnerabilityDetails.
        :rtype: list[PackageIssue]
        """
        return self._package_issue

    @package_issue.setter
    def package_issue(self, package_issue):
        """
        Sets the package_issue of this VulnerabilityDetails.
        The set of affected locations and their fixes (if available) within the associated resource.

        :param package_issue: The package_issue of this VulnerabilityDetails.
        :type: list[PackageIssue]
        """

        self._package_issue = package_issue

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
