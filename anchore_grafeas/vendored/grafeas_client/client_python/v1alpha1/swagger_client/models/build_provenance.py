# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BuildProvenance(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, project_id=None, project_num=None, commands=None, built_artifacts=None, create_time=None, start_time=None, finish_time=None, user_id=None, creator=None, logs_bucket=None, source_provenance=None, trigger_id=None, build_options=None, builder_version=None):
        """
        BuildProvenance - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'project_id': 'str',
            'project_num': 'str',
            'commands': 'list[Command]',
            'built_artifacts': 'list[Artifact]',
            'create_time': 'str',
            'start_time': 'str',
            'finish_time': 'str',
            'user_id': 'str',
            'creator': 'str',
            'logs_bucket': 'str',
            'source_provenance': 'Source',
            'trigger_id': 'str',
            'build_options': 'dict(str, str)',
            'builder_version': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'project_id': 'projectId',
            'project_num': 'projectNum',
            'commands': 'commands',
            'built_artifacts': 'builtArtifacts',
            'create_time': 'createTime',
            'start_time': 'startTime',
            'finish_time': 'finishTime',
            'user_id': 'userId',
            'creator': 'creator',
            'logs_bucket': 'logsBucket',
            'source_provenance': 'sourceProvenance',
            'trigger_id': 'triggerId',
            'build_options': 'buildOptions',
            'builder_version': 'builderVersion'
        }

        self._id = id
        self._project_id = project_id
        self._project_num = project_num
        self._commands = commands
        self._built_artifacts = built_artifacts
        self._create_time = create_time
        self._start_time = start_time
        self._finish_time = finish_time
        self._user_id = user_id
        self._creator = creator
        self._logs_bucket = logs_bucket
        self._source_provenance = source_provenance
        self._trigger_id = trigger_id
        self._build_options = build_options
        self._builder_version = builder_version

    @property
    def id(self):
        """
        Gets the id of this BuildProvenance.
        Unique identifier of the build.

        :return: The id of this BuildProvenance.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BuildProvenance.
        Unique identifier of the build.

        :param id: The id of this BuildProvenance.
        :type: str
        """

        self._id = id

    @property
    def project_id(self):
        """
        Gets the project_id of this BuildProvenance.
        ID of the project.

        :return: The project_id of this BuildProvenance.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this BuildProvenance.
        ID of the project.

        :param project_id: The project_id of this BuildProvenance.
        :type: str
        """

        self._project_id = project_id

    @property
    def project_num(self):
        """
        Gets the project_num of this BuildProvenance.
        Numerical ID of the project.

        :return: The project_num of this BuildProvenance.
        :rtype: str
        """
        return self._project_num

    @project_num.setter
    def project_num(self, project_num):
        """
        Sets the project_num of this BuildProvenance.
        Numerical ID of the project.

        :param project_num: The project_num of this BuildProvenance.
        :type: str
        """

        self._project_num = project_num

    @property
    def commands(self):
        """
        Gets the commands of this BuildProvenance.
        Commands requested by the build.

        :return: The commands of this BuildProvenance.
        :rtype: list[Command]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """
        Sets the commands of this BuildProvenance.
        Commands requested by the build.

        :param commands: The commands of this BuildProvenance.
        :type: list[Command]
        """

        self._commands = commands

    @property
    def built_artifacts(self):
        """
        Gets the built_artifacts of this BuildProvenance.
        Output of the build.

        :return: The built_artifacts of this BuildProvenance.
        :rtype: list[Artifact]
        """
        return self._built_artifacts

    @built_artifacts.setter
    def built_artifacts(self, built_artifacts):
        """
        Sets the built_artifacts of this BuildProvenance.
        Output of the build.

        :param built_artifacts: The built_artifacts of this BuildProvenance.
        :type: list[Artifact]
        """

        self._built_artifacts = built_artifacts

    @property
    def create_time(self):
        """
        Gets the create_time of this BuildProvenance.
        Time at which the build was created.

        :return: The create_time of this BuildProvenance.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this BuildProvenance.
        Time at which the build was created.

        :param create_time: The create_time of this BuildProvenance.
        :type: str
        """

        self._create_time = create_time

    @property
    def start_time(self):
        """
        Gets the start_time of this BuildProvenance.
        Time at which execution of the build was started.

        :return: The start_time of this BuildProvenance.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this BuildProvenance.
        Time at which execution of the build was started.

        :param start_time: The start_time of this BuildProvenance.
        :type: str
        """

        self._start_time = start_time

    @property
    def finish_time(self):
        """
        Gets the finish_time of this BuildProvenance.
        Time at whihc execution of the build was finished.

        :return: The finish_time of this BuildProvenance.
        :rtype: str
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """
        Sets the finish_time of this BuildProvenance.
        Time at whihc execution of the build was finished.

        :param finish_time: The finish_time of this BuildProvenance.
        :type: str
        """

        self._finish_time = finish_time

    @property
    def user_id(self):
        """
        Gets the user_id of this BuildProvenance.
        GAIA ID of end user who initiated this build; at the time that the BuildProvenance is uploaded to Analysis, this will be resolved to the primary e-mail address of the user and stored in the Creator field.

        :return: The user_id of this BuildProvenance.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this BuildProvenance.
        GAIA ID of end user who initiated this build; at the time that the BuildProvenance is uploaded to Analysis, this will be resolved to the primary e-mail address of the user and stored in the Creator field.

        :param user_id: The user_id of this BuildProvenance.
        :type: str
        """

        self._user_id = user_id

    @property
    def creator(self):
        """
        Gets the creator of this BuildProvenance.
        E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.

        :return: The creator of this BuildProvenance.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """
        Sets the creator of this BuildProvenance.
        E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.

        :param creator: The creator of this BuildProvenance.
        :type: str
        """

        self._creator = creator

    @property
    def logs_bucket(self):
        """
        Gets the logs_bucket of this BuildProvenance.
        Google Cloud Storage bucket where logs were written.

        :return: The logs_bucket of this BuildProvenance.
        :rtype: str
        """
        return self._logs_bucket

    @logs_bucket.setter
    def logs_bucket(self, logs_bucket):
        """
        Sets the logs_bucket of this BuildProvenance.
        Google Cloud Storage bucket where logs were written.

        :param logs_bucket: The logs_bucket of this BuildProvenance.
        :type: str
        """

        self._logs_bucket = logs_bucket

    @property
    def source_provenance(self):
        """
        Gets the source_provenance of this BuildProvenance.
        Details of the Source input to the build.

        :return: The source_provenance of this BuildProvenance.
        :rtype: Source
        """
        return self._source_provenance

    @source_provenance.setter
    def source_provenance(self, source_provenance):
        """
        Sets the source_provenance of this BuildProvenance.
        Details of the Source input to the build.

        :param source_provenance: The source_provenance of this BuildProvenance.
        :type: Source
        """

        self._source_provenance = source_provenance

    @property
    def trigger_id(self):
        """
        Gets the trigger_id of this BuildProvenance.
        Trigger identifier if the build was triggered automatically; empty if not.

        :return: The trigger_id of this BuildProvenance.
        :rtype: str
        """
        return self._trigger_id

    @trigger_id.setter
    def trigger_id(self, trigger_id):
        """
        Sets the trigger_id of this BuildProvenance.
        Trigger identifier if the build was triggered automatically; empty if not.

        :param trigger_id: The trigger_id of this BuildProvenance.
        :type: str
        """

        self._trigger_id = trigger_id

    @property
    def build_options(self):
        """
        Gets the build_options of this BuildProvenance.
        Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.

        :return: The build_options of this BuildProvenance.
        :rtype: dict(str, str)
        """
        return self._build_options

    @build_options.setter
    def build_options(self, build_options):
        """
        Sets the build_options of this BuildProvenance.
        Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.

        :param build_options: The build_options of this BuildProvenance.
        :type: dict(str, str)
        """

        self._build_options = build_options

    @property
    def builder_version(self):
        """
        Gets the builder_version of this BuildProvenance.
        Version string of the builder at the time this build was executed.

        :return: The builder_version of this BuildProvenance.
        :rtype: str
        """
        return self._builder_version

    @builder_version.setter
    def builder_version(self, builder_version):
        """
        Sets the builder_version of this BuildProvenance.
        Version string of the builder at the time this build was executed.

        :param builder_version: The builder_version of this BuildProvenance.
        :type: str
        """

        self._builder_version = builder_version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
