# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BuildDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, provenance=None, provenance_bytes=None):
        """
        BuildDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'provenance': 'BuildProvenance',
            'provenance_bytes': 'str'
        }

        self.attribute_map = {
            'provenance': 'provenance',
            'provenance_bytes': 'provenanceBytes'
        }

        self._provenance = provenance
        self._provenance_bytes = provenance_bytes

    @property
    def provenance(self):
        """
        Gets the provenance of this BuildDetails.
        The actual provenance

        :return: The provenance of this BuildDetails.
        :rtype: BuildProvenance
        """
        return self._provenance

    @provenance.setter
    def provenance(self, provenance):
        """
        Sets the provenance of this BuildDetails.
        The actual provenance

        :param provenance: The provenance of this BuildDetails.
        :type: BuildProvenance
        """

        self._provenance = provenance

    @property
    def provenance_bytes(self):
        """
        Gets the provenance_bytes of this BuildDetails.
        Serialized json representation of the provenance, used in generating the BuildSignature in the corresponding Result. After verifying the signature, provenance_bytes can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification.  The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.

        :return: The provenance_bytes of this BuildDetails.
        :rtype: str
        """
        return self._provenance_bytes

    @provenance_bytes.setter
    def provenance_bytes(self, provenance_bytes):
        """
        Sets the provenance_bytes of this BuildDetails.
        Serialized json representation of the provenance, used in generating the BuildSignature in the corresponding Result. After verifying the signature, provenance_bytes can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification.  The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.

        :param provenance_bytes: The provenance_bytes of this BuildDetails.
        :type: str
        """

        self._provenance_bytes = provenance_bytes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
