# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Artifact(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, checksum=None, id=None, names=None):
        """
        Artifact - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'checksum': 'str',
            'id': 'str',
            'names': 'list[str]'
        }

        self.attribute_map = {
            'checksum': 'checksum',
            'id': 'id',
            'names': 'names'
        }

        self._checksum = checksum
        self._id = id
        self._names = names

    @property
    def checksum(self):
        """
        Gets the checksum of this Artifact.
        Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.

        :return: The checksum of this Artifact.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """
        Sets the checksum of this Artifact.
        Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.

        :param checksum: The checksum of this Artifact.
        :type: str
        """

        self._checksum = checksum

    @property
    def id(self):
        """
        Gets the id of this Artifact.
        Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456

        :return: The id of this Artifact.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Artifact.
        Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456

        :param id: The id of this Artifact.
        :type: str
        """

        self._id = id

    @property
    def names(self):
        """
        Gets the names of this Artifact.
        Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.

        :return: The names of this Artifact.
        :rtype: list[str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """
        Sets the names of this Artifact.
        Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.

        :param names: The names of this Artifact.
        :type: list[str]
        """

        self._names = names

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
