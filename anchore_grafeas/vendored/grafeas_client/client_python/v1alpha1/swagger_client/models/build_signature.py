# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BuildSignature(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, public_key=None, signature=None, key_id=None, key_type=None):
        """
        BuildSignature - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'public_key': 'str',
            'signature': 'str',
            'key_id': 'str',
            'key_type': 'str'
        }

        self.attribute_map = {
            'public_key': 'publicKey',
            'signature': 'signature',
            'key_id': 'keyId',
            'key_type': 'keyType'
        }

        self._public_key = public_key
        self._signature = signature
        self._key_id = key_id
        self._key_type = key_type

    @property
    def public_key(self):
        """
        Gets the public_key of this BuildSignature.
        Public key of the builder which can be used to verify that related Findings are valid and unchanged.  If `key_type` is empty this defaults to PEM encoded public keys.  This field may be empty if `key_id` references an external key.  For Cloud Container Builder based signatures this is a PEM encoded public key. To verify the Cloud Container Builder signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from BuildDetails are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`

        :return: The public_key of this BuildSignature.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """
        Sets the public_key of this BuildSignature.
        Public key of the builder which can be used to verify that related Findings are valid and unchanged.  If `key_type` is empty this defaults to PEM encoded public keys.  This field may be empty if `key_id` references an external key.  For Cloud Container Builder based signatures this is a PEM encoded public key. To verify the Cloud Container Builder signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from BuildDetails are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`

        :param public_key: The public_key of this BuildSignature.
        :type: str
        """

        self._public_key = public_key

    @property
    def signature(self):
        """
        Gets the signature of this BuildSignature.
        Signature of the related BuildProvenance, encoded in a base64 string.

        :return: The signature of this BuildSignature.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """
        Sets the signature of this BuildSignature.
        Signature of the related BuildProvenance, encoded in a base64 string.

        :param signature: The signature of this BuildSignature.
        :type: str
        """

        self._signature = signature

    @property
    def key_id(self):
        """
        Gets the key_id of this BuildSignature.
        An ID for the key used to sign.  This could be either an ID for the key stored in `public_key` (e.g., the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (e.g., a reference to a key in Cloud KMS).

        :return: The key_id of this BuildSignature.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """
        Sets the key_id of this BuildSignature.
        An ID for the key used to sign.  This could be either an ID for the key stored in `public_key` (e.g., the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (e.g., a reference to a key in Cloud KMS).

        :param key_id: The key_id of this BuildSignature.
        :type: str
        """

        self._key_id = key_id

    @property
    def key_type(self):
        """
        Gets the key_type of this BuildSignature.
        The type of the key, either stored in `public_key` or referenced in `key_id`

        :return: The key_type of this BuildSignature.
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """
        Sets the key_type of this BuildSignature.
        The type of the key, either stored in `public_key` or referenced in `key_id`

        :param key_type: The key_type of this BuildSignature.
        :type: str
        """
        allowed_values = ["UNSET", "PGP_ASCII_ARMORED", "PKIX_PEM"]
        if key_type not in allowed_values:
            raise ValueError(
                "Invalid value for `key_type` ({0}), must be one of {1}"
                .format(key_type, allowed_values)
            )

        self._key_type = key_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
