# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Deployment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_email=None, deploy_time=None, undeploy_time=None, config=None, address=None):
        """
        Deployment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user_email': 'str',
            'deploy_time': 'str',
            'undeploy_time': 'str',
            'config': 'dict(str, str)',
            'address': 'str'
        }

        self.attribute_map = {
            'user_email': 'userEmail',
            'deploy_time': 'deployTime',
            'undeploy_time': 'undeployTime',
            'config': 'config',
            'address': 'address'
        }

        self._user_email = user_email
        self._deploy_time = deploy_time
        self._undeploy_time = undeploy_time
        self._config = config
        self._address = address

    @property
    def user_email(self):
        """
        Gets the user_email of this Deployment.
        Identity of the user that triggered this deployment.

        :return: The user_email of this Deployment.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """
        Sets the user_email of this Deployment.
        Identity of the user that triggered this deployment.

        :param user_email: The user_email of this Deployment.
        :type: str
        """

        self._user_email = user_email

    @property
    def deploy_time(self):
        """
        Gets the deploy_time of this Deployment.
        Beginning of the lifetime of this deployment.

        :return: The deploy_time of this Deployment.
        :rtype: str
        """
        return self._deploy_time

    @deploy_time.setter
    def deploy_time(self, deploy_time):
        """
        Sets the deploy_time of this Deployment.
        Beginning of the lifetime of this deployment.

        :param deploy_time: The deploy_time of this Deployment.
        :type: str
        """

        self._deploy_time = deploy_time

    @property
    def undeploy_time(self):
        """
        Gets the undeploy_time of this Deployment.
        End of the lifetime of this deployment.

        :return: The undeploy_time of this Deployment.
        :rtype: str
        """
        return self._undeploy_time

    @undeploy_time.setter
    def undeploy_time(self, undeploy_time):
        """
        Sets the undeploy_time of this Deployment.
        End of the lifetime of this deployment.

        :param undeploy_time: The undeploy_time of this Deployment.
        :type: str
        """

        self._undeploy_time = undeploy_time

    @property
    def config(self):
        """
        Gets the config of this Deployment.
        Configuration used to create this deployment.

        :return: The config of this Deployment.
        :rtype: dict(str, str)
        """
        return self._config

    @config.setter
    def config(self, config):
        """
        Sets the config of this Deployment.
        Configuration used to create this deployment.

        :param config: The config of this Deployment.
        :type: dict(str, str)
        """

        self._config = config

    @property
    def address(self):
        """
        Gets the address of this Deployment.
        Address of the runtime element hosting this deployment.

        :return: The address of this Deployment.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this Deployment.
        Address of the runtime element hosting this deployment.

        :param address: The address of this Deployment.
        :type: str
        """

        self._address = address

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
