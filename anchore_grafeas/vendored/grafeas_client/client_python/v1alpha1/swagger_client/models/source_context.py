# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SourceContext(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cloud_repo=None, cloud_workspace=None, gerrit=None, git=None):
        """
        SourceContext - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cloud_repo': 'CloudRepoSourceContext',
            'cloud_workspace': 'CloudWorkspaceSourceContext',
            'gerrit': 'GerritSourceContext',
            'git': 'GitSourceContext'
        }

        self.attribute_map = {
            'cloud_repo': 'cloudRepo',
            'cloud_workspace': 'cloudWorkspace',
            'gerrit': 'gerrit',
            'git': 'git'
        }

        self._cloud_repo = cloud_repo
        self._cloud_workspace = cloud_workspace
        self._gerrit = gerrit
        self._git = git

    @property
    def cloud_repo(self):
        """
        Gets the cloud_repo of this SourceContext.
        A SourceContext referring to a revision in a cloud repo.

        :return: The cloud_repo of this SourceContext.
        :rtype: CloudRepoSourceContext
        """
        return self._cloud_repo

    @cloud_repo.setter
    def cloud_repo(self, cloud_repo):
        """
        Sets the cloud_repo of this SourceContext.
        A SourceContext referring to a revision in a cloud repo.

        :param cloud_repo: The cloud_repo of this SourceContext.
        :type: CloudRepoSourceContext
        """

        self._cloud_repo = cloud_repo

    @property
    def cloud_workspace(self):
        """
        Gets the cloud_workspace of this SourceContext.
        A SourceContext referring to a snapshot in a cloud workspace.

        :return: The cloud_workspace of this SourceContext.
        :rtype: CloudWorkspaceSourceContext
        """
        return self._cloud_workspace

    @cloud_workspace.setter
    def cloud_workspace(self, cloud_workspace):
        """
        Sets the cloud_workspace of this SourceContext.
        A SourceContext referring to a snapshot in a cloud workspace.

        :param cloud_workspace: The cloud_workspace of this SourceContext.
        :type: CloudWorkspaceSourceContext
        """

        self._cloud_workspace = cloud_workspace

    @property
    def gerrit(self):
        """
        Gets the gerrit of this SourceContext.
        A SourceContext referring to a Gerrit project.

        :return: The gerrit of this SourceContext.
        :rtype: GerritSourceContext
        """
        return self._gerrit

    @gerrit.setter
    def gerrit(self, gerrit):
        """
        Sets the gerrit of this SourceContext.
        A SourceContext referring to a Gerrit project.

        :param gerrit: The gerrit of this SourceContext.
        :type: GerritSourceContext
        """

        self._gerrit = gerrit

    @property
    def git(self):
        """
        Gets the git of this SourceContext.
        A SourceContext referring to any third party Git repo (e.g. GitHub).

        :return: The git of this SourceContext.
        :rtype: GitSourceContext
        """
        return self._git

    @git.setter
    def git(self, git):
        """
        Sets the git of this SourceContext.
        A SourceContext referring to any third party Git repo (e.g. GitHub).

        :param git: The git of this SourceContext.
        :type: GitSourceContext
        """

        self._git = git

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
