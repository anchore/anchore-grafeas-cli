# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class StorageSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, bucket=None, object=None, generation=None):
        """
        StorageSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bucket': 'str',
            'object': 'str',
            'generation': 'str'
        }

        self.attribute_map = {
            'bucket': 'bucket',
            'object': 'object',
            'generation': 'generation'
        }

        self._bucket = bucket
        self._object = object
        self._generation = generation

    @property
    def bucket(self):
        """
        Gets the bucket of this StorageSource.
        Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).

        :return: The bucket of this StorageSource.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """
        Sets the bucket of this StorageSource.
        Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).

        :param bucket: The bucket of this StorageSource.
        :type: str
        """

        self._bucket = bucket

    @property
    def object(self):
        """
        Gets the object of this StorageSource.
        Google Cloud Storage object containing source.

        :return: The object of this StorageSource.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this StorageSource.
        Google Cloud Storage object containing source.

        :param object: The object of this StorageSource.
        :type: str
        """

        self._object = object

    @property
    def generation(self):
        """
        Gets the generation of this StorageSource.
        Google Cloud Storage generation for the object.

        :return: The generation of this StorageSource.
        :rtype: str
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """
        Sets the generation of this StorageSource.
        Google Cloud Storage generation for the object.

        :param generation: The generation of this StorageSource.
        :type: str
        """

        self._generation = generation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
