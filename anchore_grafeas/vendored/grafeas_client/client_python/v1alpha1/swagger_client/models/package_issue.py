# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PackageIssue(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, affected_location=None, fixed_location=None, severity_name=None):
        """
        PackageIssue - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'affected_location': 'VulnerabilityLocation',
            'fixed_location': 'VulnerabilityLocation',
            'severity_name': 'str'
        }

        self.attribute_map = {
            'affected_location': 'affectedLocation',
            'fixed_location': 'fixedLocation',
            'severity_name': 'severityName'
        }

        self._affected_location = affected_location
        self._fixed_location = fixed_location
        self._severity_name = severity_name

    @property
    def affected_location(self):
        """
        Gets the affected_location of this PackageIssue.
        The location of the vulnerability.

        :return: The affected_location of this PackageIssue.
        :rtype: VulnerabilityLocation
        """
        return self._affected_location

    @affected_location.setter
    def affected_location(self, affected_location):
        """
        Sets the affected_location of this PackageIssue.
        The location of the vulnerability.

        :param affected_location: The affected_location of this PackageIssue.
        :type: VulnerabilityLocation
        """

        self._affected_location = affected_location

    @property
    def fixed_location(self):
        """
        Gets the fixed_location of this PackageIssue.
        The location of the available fix for vulnerability.

        :return: The fixed_location of this PackageIssue.
        :rtype: VulnerabilityLocation
        """
        return self._fixed_location

    @fixed_location.setter
    def fixed_location(self, fixed_location):
        """
        Sets the fixed_location of this PackageIssue.
        The location of the available fix for vulnerability.

        :param fixed_location: The fixed_location of this PackageIssue.
        :type: VulnerabilityLocation
        """

        self._fixed_location = fixed_location

    @property
    def severity_name(self):
        """
        Gets the severity_name of this PackageIssue.
        The severity (eg: distro assigned severity) for this vulnerability.

        :return: The severity_name of this PackageIssue.
        :rtype: str
        """
        return self._severity_name

    @severity_name.setter
    def severity_name(self, severity_name):
        """
        Sets the severity_name of this PackageIssue.
        The severity (eg: distro assigned severity) for this vulnerability.

        :param severity_name: The severity_name of this PackageIssue.
        :type: str
        """

        self._severity_name = severity_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
