# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RepoSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, project_id=None, repo_name=None, branch_name=None, tag_name=None, commit_sha=None):
        """
        RepoSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'project_id': 'str',
            'repo_name': 'str',
            'branch_name': 'str',
            'tag_name': 'str',
            'commit_sha': 'str'
        }

        self.attribute_map = {
            'project_id': 'projectId',
            'repo_name': 'repoName',
            'branch_name': 'branchName',
            'tag_name': 'tagName',
            'commit_sha': 'commitSha'
        }

        self._project_id = project_id
        self._repo_name = repo_name
        self._branch_name = branch_name
        self._tag_name = tag_name
        self._commit_sha = commit_sha

    @property
    def project_id(self):
        """
        Gets the project_id of this RepoSource.
        ID of the project that owns the repo.

        :return: The project_id of this RepoSource.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this RepoSource.
        ID of the project that owns the repo.

        :param project_id: The project_id of this RepoSource.
        :type: str
        """

        self._project_id = project_id

    @property
    def repo_name(self):
        """
        Gets the repo_name of this RepoSource.
        Name of the repo.

        :return: The repo_name of this RepoSource.
        :rtype: str
        """
        return self._repo_name

    @repo_name.setter
    def repo_name(self, repo_name):
        """
        Sets the repo_name of this RepoSource.
        Name of the repo.

        :param repo_name: The repo_name of this RepoSource.
        :type: str
        """

        self._repo_name = repo_name

    @property
    def branch_name(self):
        """
        Gets the branch_name of this RepoSource.
        Name of the branch to build.

        :return: The branch_name of this RepoSource.
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """
        Sets the branch_name of this RepoSource.
        Name of the branch to build.

        :param branch_name: The branch_name of this RepoSource.
        :type: str
        """

        self._branch_name = branch_name

    @property
    def tag_name(self):
        """
        Gets the tag_name of this RepoSource.
        Name of the tag to build.

        :return: The tag_name of this RepoSource.
        :rtype: str
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name):
        """
        Sets the tag_name of this RepoSource.
        Name of the tag to build.

        :param tag_name: The tag_name of this RepoSource.
        :type: str
        """

        self._tag_name = tag_name

    @property
    def commit_sha(self):
        """
        Gets the commit_sha of this RepoSource.
        Explicit commit SHA to build.

        :return: The commit_sha of this RepoSource.
        :rtype: str
        """
        return self._commit_sha

    @commit_sha.setter
    def commit_sha(self, commit_sha):
        """
        Sets the commit_sha of this RepoSource.
        Explicit commit SHA to build.

        :param commit_sha: The commit_sha of this RepoSource.
        :type: str
        """

        self._commit_sha = commit_sha

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
