# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CloudWorkspaceId(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, repo_id=None, name=None):
        """
        CloudWorkspaceId - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'repo_id': 'RepoId',
            'name': 'str'
        }

        self.attribute_map = {
            'repo_id': 'repoId',
            'name': 'name'
        }

        self._repo_id = repo_id
        self._name = name

    @property
    def repo_id(self):
        """
        Gets the repo_id of this CloudWorkspaceId.
        The ID of the repo containing the workspace.

        :return: The repo_id of this CloudWorkspaceId.
        :rtype: RepoId
        """
        return self._repo_id

    @repo_id.setter
    def repo_id(self, repo_id):
        """
        Sets the repo_id of this CloudWorkspaceId.
        The ID of the repo containing the workspace.

        :param repo_id: The repo_id of this CloudWorkspaceId.
        :type: RepoId
        """

        self._repo_id = repo_id

    @property
    def name(self):
        """
        Gets the name of this CloudWorkspaceId.
        The unique name of the workspace within the repo.  This is the name chosen by the client in the Source API's CreateWorkspace method.

        :return: The name of this CloudWorkspaceId.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CloudWorkspaceId.
        The unique name of the workspace within the repo.  This is the name chosen by the client in the Source API's CreateWorkspace method.

        :param name: The name of this CloudWorkspaceId.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
