# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class VulnerabilityType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cvss_score=None, severity=None, package_type=None, details=None):
        """
        VulnerabilityType - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cvss_score': 'float',
            'severity': 'str',
            'package_type': 'str',
            'details': 'list[Detail]'
        }

        self.attribute_map = {
            'cvss_score': 'cvssScore',
            'severity': 'severity',
            'package_type': 'package_type',
            'details': 'details'
        }

        self._cvss_score = cvss_score
        self._severity = severity
        self._package_type = package_type
        self._details = details

    @property
    def cvss_score(self):
        """
        Gets the cvss_score of this VulnerabilityType.
        The CVSS score for this Vulnerability.

        :return: The cvss_score of this VulnerabilityType.
        :rtype: float
        """
        return self._cvss_score

    @cvss_score.setter
    def cvss_score(self, cvss_score):
        """
        Sets the cvss_score of this VulnerabilityType.
        The CVSS score for this Vulnerability.

        :param cvss_score: The cvss_score of this VulnerabilityType.
        :type: float
        """

        self._cvss_score = cvss_score

    @property
    def severity(self):
        """
        Gets the severity of this VulnerabilityType.
        Note provider assigned impact of the vulnerability

        :return: The severity of this VulnerabilityType.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """
        Sets the severity of this VulnerabilityType.
        Note provider assigned impact of the vulnerability

        :param severity: The severity of this VulnerabilityType.
        :type: str
        """
        allowed_values = ["UNKNOWN", "MINIMAL", "LOW", "MEDIUM", "HIGH", "CRITICAL"]
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def package_type(self):
        """
        Gets the package_type of this VulnerabilityType.
        The type of package; whether native or non native(ruby gems, node.js packages etc)

        :return: The package_type of this VulnerabilityType.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """
        Sets the package_type of this VulnerabilityType.
        The type of package; whether native or non native(ruby gems, node.js packages etc)

        :param package_type: The package_type of this VulnerabilityType.
        :type: str
        """

        self._package_type = package_type

    @property
    def details(self):
        """
        Gets the details of this VulnerabilityType.
        All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.

        :return: The details of this VulnerabilityType.
        :rtype: list[Detail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this VulnerabilityType.
        All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.

        :param details: The details of this VulnerabilityType.
        :type: list[Detail]
        """

        self._details = details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
