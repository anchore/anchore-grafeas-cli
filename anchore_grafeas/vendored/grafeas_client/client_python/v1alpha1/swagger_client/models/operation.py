# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Operation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, metadata=None, done=None, error=None, response=None):
        """
        Operation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'metadata': 'dict(str, str)',
            'done': 'bool',
            'error': 'Status',
            'response': 'dict(str, str)'
        }

        self.attribute_map = {
            'name': 'name',
            'metadata': 'metadata',
            'done': 'done',
            'error': 'error',
            'response': 'response'
        }

        self._name = name
        self._metadata = metadata
        self._done = done
        self._error = error
        self._response = response

    @property
    def name(self):
        """
        Gets the name of this Operation.
        The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should have the format of `operations/some/unique/name`.

        :return: The name of this Operation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Operation.
        The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should have the format of `operations/some/unique/name`.

        :param name: The name of this Operation.
        :type: str
        """

        self._name = name

    @property
    def metadata(self):
        """
        Gets the metadata of this Operation.
        Service-specific metadata associated with the operation.  It typically contains progress information and common metadata such as create time. Some services might not provide such metadata.  Any method that returns a long-running operation should document the metadata type, if any.

        :return: The metadata of this Operation.
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this Operation.
        Service-specific metadata associated with the operation.  It typically contains progress information and common metadata such as create time. Some services might not provide such metadata.  Any method that returns a long-running operation should document the metadata type, if any.

        :param metadata: The metadata of this Operation.
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def done(self):
        """
        Gets the done of this Operation.
        If the value is `false`, it means the operation is still in progress. If true, the operation is completed, and either `error` or `response` is available.

        :return: The done of this Operation.
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """
        Sets the done of this Operation.
        If the value is `false`, it means the operation is still in progress. If true, the operation is completed, and either `error` or `response` is available.

        :param done: The done of this Operation.
        :type: bool
        """

        self._done = done

    @property
    def error(self):
        """
        Gets the error of this Operation.
        The error result of the operation in case of failure or cancellation.

        :return: The error of this Operation.
        :rtype: Status
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this Operation.
        The error result of the operation in case of failure or cancellation.

        :param error: The error of this Operation.
        :type: Status
        """

        self._error = error

    @property
    def response(self):
        """
        Gets the response of this Operation.
        The normal response of the operation in case of success.  If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`.  If the original method is standard `Get`/`Create`/`Update`, the response should be the resource.  For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name.  For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

        :return: The response of this Operation.
        :rtype: dict(str, str)
        """
        return self._response

    @response.setter
    def response(self, response):
        """
        Sets the response of this Operation.
        The normal response of the operation in case of success.  If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`.  If the original method is standard `Get`/`Create`/`Update`, the response should be the resource.  For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name.  For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

        :param response: The response of this Operation.
        :type: dict(str, str)
        """

        self._response = response

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
