# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class GrafeasApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_note(self, projects_id, **kwargs):
        """
        
        Creates a new note.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_note(projects_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `parent`. This field contains the projectId for example: \"project/{project_id} (required)
        :param str note_id: The ID to use for this note.
        :param Note note: The Note to be inserted
        :return: Note
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_note_with_http_info(projects_id, **kwargs)
        else:
            (data) = self.create_note_with_http_info(projects_id, **kwargs)
            return data

    def create_note_with_http_info(self, projects_id, **kwargs):
        """
        
        Creates a new note.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_note_with_http_info(projects_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `parent`. This field contains the projectId for example: \"project/{project_id} (required)
        :param str note_id: The ID to use for this note.
        :param Note note: The Note to be inserted
        :return: Note
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_id', 'note_id', 'note']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_id' is set
        if ('projects_id' not in params) or (params['projects_id'] is None):
            raise ValueError("Missing the required parameter `projects_id` when calling `create_note`")

        resource_path = '/v1alpha1/projects/{projectsId}/notes'.replace('{format}', 'json')
        path_params = {}
        if 'projects_id' in params:
            path_params['projectsId'] = params['projects_id']

        query_params = {}
        if 'note_id' in params:
            query_params['noteId'] = params['note_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'note' in params:
            body_params = params['note']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Note',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_occurrence(self, projects_id, **kwargs):
        """
        
        Creates a new occurrence.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_occurrence(projects_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `parent`. This field contains the projectId for example: \"projects/{project_id}\" (required)
        :param Occurrence occurrence: The occurrence to be inserted
        :return: Occurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_occurrence_with_http_info(projects_id, **kwargs)
        else:
            (data) = self.create_occurrence_with_http_info(projects_id, **kwargs)
            return data

    def create_occurrence_with_http_info(self, projects_id, **kwargs):
        """
        
        Creates a new occurrence.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_occurrence_with_http_info(projects_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `parent`. This field contains the projectId for example: \"projects/{project_id}\" (required)
        :param Occurrence occurrence: The occurrence to be inserted
        :return: Occurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_id', 'occurrence']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_occurrence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_id' is set
        if ('projects_id' not in params) or (params['projects_id'] is None):
            raise ValueError("Missing the required parameter `projects_id` when calling `create_occurrence`")

        resource_path = '/v1alpha1/projects/{projectsId}/occurrences'.replace('{format}', 'json')
        path_params = {}
        if 'projects_id' in params:
            path_params['projectsId'] = params['projects_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'occurrence' in params:
            body_params = params['occurrence']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Occurrence',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_note(self, projects_id, notes_id, **kwargs):
        """
        
        Deletes the given note from the system.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_note(projects_id, notes_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the note in the form \"projects/{project_id}/notes/{note_id}\" (required)
        :param str notes_id: Part of `name`. See documentation of `projectsId`. (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_note_with_http_info(projects_id, notes_id, **kwargs)
        else:
            (data) = self.delete_note_with_http_info(projects_id, notes_id, **kwargs)
            return data

    def delete_note_with_http_info(self, projects_id, notes_id, **kwargs):
        """
        
        Deletes the given note from the system.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_note_with_http_info(projects_id, notes_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the note in the form \"projects/{project_id}/notes/{note_id}\" (required)
        :param str notes_id: Part of `name`. See documentation of `projectsId`. (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_id', 'notes_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_id' is set
        if ('projects_id' not in params) or (params['projects_id'] is None):
            raise ValueError("Missing the required parameter `projects_id` when calling `delete_note`")
        # verify the required parameter 'notes_id' is set
        if ('notes_id' not in params) or (params['notes_id'] is None):
            raise ValueError("Missing the required parameter `notes_id` when calling `delete_note`")

        resource_path = '/v1alpha1/projects/{projectsId}/notes/{notesId}'.replace('{format}', 'json')
        path_params = {}
        if 'projects_id' in params:
            path_params['projectsId'] = params['projects_id']
        if 'notes_id' in params:
            path_params['notesId'] = params['notes_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Empty',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_occurrence(self, projects_id, occurrences_id, **kwargs):
        """
        
        Deletes the given occurrence from the system.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_occurrence(projects_id, occurrences_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the occurrence in the form \"projects/{project_id}/occurrences/{occurrence_id}\" (required)
        :param str occurrences_id: Part of `name`. See documentation of `projectsId`. (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_occurrence_with_http_info(projects_id, occurrences_id, **kwargs)
        else:
            (data) = self.delete_occurrence_with_http_info(projects_id, occurrences_id, **kwargs)
            return data

    def delete_occurrence_with_http_info(self, projects_id, occurrences_id, **kwargs):
        """
        
        Deletes the given occurrence from the system.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_occurrence_with_http_info(projects_id, occurrences_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the occurrence in the form \"projects/{project_id}/occurrences/{occurrence_id}\" (required)
        :param str occurrences_id: Part of `name`. See documentation of `projectsId`. (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_id', 'occurrences_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_occurrence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_id' is set
        if ('projects_id' not in params) or (params['projects_id'] is None):
            raise ValueError("Missing the required parameter `projects_id` when calling `delete_occurrence`")
        # verify the required parameter 'occurrences_id' is set
        if ('occurrences_id' not in params) or (params['occurrences_id'] is None):
            raise ValueError("Missing the required parameter `occurrences_id` when calling `delete_occurrence`")

        resource_path = '/v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}'.replace('{format}', 'json')
        path_params = {}
        if 'projects_id' in params:
            path_params['projectsId'] = params['projects_id']
        if 'occurrences_id' in params:
            path_params['occurrencesId'] = params['occurrences_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Empty',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_note(self, projects_id, notes_id, **kwargs):
        """
        
        Returns the requested occurrence

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_note(projects_id, notes_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the note in the form \"projects/{project_id}/notes/{note_id}\" (required)
        :param str notes_id: Part of `name`. See documentation of `projectsId`. (required)
        :return: Note
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_note_with_http_info(projects_id, notes_id, **kwargs)
        else:
            (data) = self.get_note_with_http_info(projects_id, notes_id, **kwargs)
            return data

    def get_note_with_http_info(self, projects_id, notes_id, **kwargs):
        """
        
        Returns the requested occurrence

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_note_with_http_info(projects_id, notes_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the note in the form \"projects/{project_id}/notes/{note_id}\" (required)
        :param str notes_id: Part of `name`. See documentation of `projectsId`. (required)
        :return: Note
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_id', 'notes_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_id' is set
        if ('projects_id' not in params) or (params['projects_id'] is None):
            raise ValueError("Missing the required parameter `projects_id` when calling `get_note`")
        # verify the required parameter 'notes_id' is set
        if ('notes_id' not in params) or (params['notes_id'] is None):
            raise ValueError("Missing the required parameter `notes_id` when calling `get_note`")

        resource_path = '/v1alpha1/projects/{projectsId}/notes/{notesId}'.replace('{format}', 'json')
        path_params = {}
        if 'projects_id' in params:
            path_params['projectsId'] = params['projects_id']
        if 'notes_id' in params:
            path_params['notesId'] = params['notes_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Note',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_occurrence(self, projects_id, occurrences_id, **kwargs):
        """
        
        Returns the requested occurrence

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_occurrence(projects_id, occurrences_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the occurrence in the form \"projects/{project_id}/occurrences/{occurrence_id}\" (required)
        :param str occurrences_id: Part of `name`. See documentation of `projectsId`. (required)
        :return: Occurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_occurrence_with_http_info(projects_id, occurrences_id, **kwargs)
        else:
            (data) = self.get_occurrence_with_http_info(projects_id, occurrences_id, **kwargs)
            return data

    def get_occurrence_with_http_info(self, projects_id, occurrences_id, **kwargs):
        """
        
        Returns the requested occurrence

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_occurrence_with_http_info(projects_id, occurrences_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the occurrence in the form \"projects/{project_id}/occurrences/{occurrence_id}\" (required)
        :param str occurrences_id: Part of `name`. See documentation of `projectsId`. (required)
        :return: Occurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_id', 'occurrences_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_occurrence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_id' is set
        if ('projects_id' not in params) or (params['projects_id'] is None):
            raise ValueError("Missing the required parameter `projects_id` when calling `get_occurrence`")
        # verify the required parameter 'occurrences_id' is set
        if ('occurrences_id' not in params) or (params['occurrences_id'] is None):
            raise ValueError("Missing the required parameter `occurrences_id` when calling `get_occurrence`")

        resource_path = '/v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}'.replace('{format}', 'json')
        path_params = {}
        if 'projects_id' in params:
            path_params['projectsId'] = params['projects_id']
        if 'occurrences_id' in params:
            path_params['occurrencesId'] = params['occurrences_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Occurrence',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_occurrence_note(self, projects_id, occurrences_id, **kwargs):
        """
        
        Gets the note that this occurrence is attached to.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_occurrence_note(projects_id, occurrences_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the occurrence in the form \"projects/{project_id}/occurrences/{occurrence_id}\" (required)
        :param str occurrences_id: Part of `name`. See documentation of `projectsId`. (required)
        :return: Note
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_occurrence_note_with_http_info(projects_id, occurrences_id, **kwargs)
        else:
            (data) = self.get_occurrence_note_with_http_info(projects_id, occurrences_id, **kwargs)
            return data

    def get_occurrence_note_with_http_info(self, projects_id, occurrences_id, **kwargs):
        """
        
        Gets the note that this occurrence is attached to.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_occurrence_note_with_http_info(projects_id, occurrences_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the occurrence in the form \"projects/{project_id}/occurrences/{occurrence_id}\" (required)
        :param str occurrences_id: Part of `name`. See documentation of `projectsId`. (required)
        :return: Note
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_id', 'occurrences_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_occurrence_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_id' is set
        if ('projects_id' not in params) or (params['projects_id'] is None):
            raise ValueError("Missing the required parameter `projects_id` when calling `get_occurrence_note`")
        # verify the required parameter 'occurrences_id' is set
        if ('occurrences_id' not in params) or (params['occurrences_id'] is None):
            raise ValueError("Missing the required parameter `occurrences_id` when calling `get_occurrence_note`")

        resource_path = '/v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}/notes'.replace('{format}', 'json')
        path_params = {}
        if 'projects_id' in params:
            path_params['projectsId'] = params['projects_id']
        if 'occurrences_id' in params:
            path_params['occurrencesId'] = params['occurrences_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Note',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_operation(self, projects_id, operations_id, **kwargs):
        """
        
        Returns the requested occurrence

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_operation(projects_id, operations_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the operation in the form \"projects/{project_id}/operations/{operation_id}\" (required)
        :param str operations_id: Part of `name`. See documentation of `projectsId`. (required)
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_operation_with_http_info(projects_id, operations_id, **kwargs)
        else:
            (data) = self.get_operation_with_http_info(projects_id, operations_id, **kwargs)
            return data

    def get_operation_with_http_info(self, projects_id, operations_id, **kwargs):
        """
        
        Returns the requested occurrence

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_operation_with_http_info(projects_id, operations_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the operation in the form \"projects/{project_id}/operations/{operation_id}\" (required)
        :param str operations_id: Part of `name`. See documentation of `projectsId`. (required)
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_id', 'operations_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_operation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_id' is set
        if ('projects_id' not in params) or (params['projects_id'] is None):
            raise ValueError("Missing the required parameter `projects_id` when calling `get_operation`")
        # verify the required parameter 'operations_id' is set
        if ('operations_id' not in params) or (params['operations_id'] is None):
            raise ValueError("Missing the required parameter `operations_id` when calling `get_operation`")

        resource_path = '/v1alpha1/projects/{projectsId}/operations/{operationsId}'.replace('{format}', 'json')
        path_params = {}
        if 'projects_id' in params:
            path_params['projectsId'] = params['projects_id']
        if 'operations_id' in params:
            path_params['operationsId'] = params['operations_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Operation',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_note_occurrences(self, projects_id, notes_id, **kwargs):
        """
        
        Lists the names of Occurrences linked to a particular Note.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_note_occurrences(projects_id, notes_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name field will contain the note name for example:   \"project/{project_id}/notes/{note_id}\" (required)
        :param str notes_id: Part of `name`. See documentation of `projectsId`. (required)
        :param str filter: The filter expression.
        :param int page_size: Number of notes to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ListNoteOccurrencesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_note_occurrences_with_http_info(projects_id, notes_id, **kwargs)
        else:
            (data) = self.list_note_occurrences_with_http_info(projects_id, notes_id, **kwargs)
            return data

    def list_note_occurrences_with_http_info(self, projects_id, notes_id, **kwargs):
        """
        
        Lists the names of Occurrences linked to a particular Note.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_note_occurrences_with_http_info(projects_id, notes_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name field will contain the note name for example:   \"project/{project_id}/notes/{note_id}\" (required)
        :param str notes_id: Part of `name`. See documentation of `projectsId`. (required)
        :param str filter: The filter expression.
        :param int page_size: Number of notes to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ListNoteOccurrencesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_id', 'notes_id', 'filter', 'page_size', 'page_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_note_occurrences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_id' is set
        if ('projects_id' not in params) or (params['projects_id'] is None):
            raise ValueError("Missing the required parameter `projects_id` when calling `list_note_occurrences`")
        # verify the required parameter 'notes_id' is set
        if ('notes_id' not in params) or (params['notes_id'] is None):
            raise ValueError("Missing the required parameter `notes_id` when calling `list_note_occurrences`")

        resource_path = '/v1alpha1/projects/{projectsId}/notes/{notesId}/occurrences'.replace('{format}', 'json')
        path_params = {}
        if 'projects_id' in params:
            path_params['projectsId'] = params['projects_id']
        if 'notes_id' in params:
            path_params['notesId'] = params['notes_id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'page_token' in params:
            query_params['pageToken'] = params['page_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListNoteOccurrencesResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_notes(self, projects_id, **kwargs):
        """
        
        Lists all notes for a given project.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_notes(projects_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `parent`. This field contains the projectId for example: \"project/{project_id} (required)
        :param str filter: The filter expression.
        :param int page_size: Number of notes to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ListNotesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_notes_with_http_info(projects_id, **kwargs)
        else:
            (data) = self.list_notes_with_http_info(projects_id, **kwargs)
            return data

    def list_notes_with_http_info(self, projects_id, **kwargs):
        """
        
        Lists all notes for a given project.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_notes_with_http_info(projects_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `parent`. This field contains the projectId for example: \"project/{project_id} (required)
        :param str filter: The filter expression.
        :param int page_size: Number of notes to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ListNotesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_id', 'filter', 'page_size', 'page_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_id' is set
        if ('projects_id' not in params) or (params['projects_id'] is None):
            raise ValueError("Missing the required parameter `projects_id` when calling `list_notes`")

        resource_path = '/v1alpha1/projects/{projectsId}/notes'.replace('{format}', 'json')
        path_params = {}
        if 'projects_id' in params:
            path_params['projectsId'] = params['projects_id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'page_token' in params:
            query_params['pageToken'] = params['page_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListNotesResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_occurrences(self, projects_id, **kwargs):
        """
        
        Lists active occurrences for a given project/Digest.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_occurrences(projects_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `parent`. This contains the projectId for example: projects/{project_id} (required)
        :param str filter: The filter expression.
        :param int page_size: Number of occurrences to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ListOccurrencesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_occurrences_with_http_info(projects_id, **kwargs)
        else:
            (data) = self.list_occurrences_with_http_info(projects_id, **kwargs)
            return data

    def list_occurrences_with_http_info(self, projects_id, **kwargs):
        """
        
        Lists active occurrences for a given project/Digest.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_occurrences_with_http_info(projects_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `parent`. This contains the projectId for example: projects/{project_id} (required)
        :param str filter: The filter expression.
        :param int page_size: Number of occurrences to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ListOccurrencesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_id', 'filter', 'page_size', 'page_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_occurrences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_id' is set
        if ('projects_id' not in params) or (params['projects_id'] is None):
            raise ValueError("Missing the required parameter `projects_id` when calling `list_occurrences`")

        resource_path = '/v1alpha1/projects/{projectsId}/occurrences'.replace('{format}', 'json')
        path_params = {}
        if 'projects_id' in params:
            path_params['projectsId'] = params['projects_id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'page_token' in params:
            query_params['pageToken'] = params['page_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListOccurrencesResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_operations(self, projects_id, **kwargs):
        """
        
        Lists all operations for a given project.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_operations(projects_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `parent`. This field contains the projectId for example: \"project/{project_id} (required)
        :param str filter: The filter expression.
        :param int page_size: Number of operations to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ListOperationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_operations_with_http_info(projects_id, **kwargs)
        else:
            (data) = self.list_operations_with_http_info(projects_id, **kwargs)
            return data

    def list_operations_with_http_info(self, projects_id, **kwargs):
        """
        
        Lists all operations for a given project.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_operations_with_http_info(projects_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `parent`. This field contains the projectId for example: \"project/{project_id} (required)
        :param str filter: The filter expression.
        :param int page_size: Number of operations to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ListOperationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_id', 'filter', 'page_size', 'page_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_operations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_id' is set
        if ('projects_id' not in params) or (params['projects_id'] is None):
            raise ValueError("Missing the required parameter `projects_id` when calling `list_operations`")

        resource_path = '/v1alpha1/projects/{projectsId}/operations'.replace('{format}', 'json')
        path_params = {}
        if 'projects_id' in params:
            path_params['projectsId'] = params['projects_id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'page_token' in params:
            query_params['pageToken'] = params['page_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListOperationsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_note(self, projects_id, notes_id, **kwargs):
        """
        
        Updates an existing note.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_note(projects_id, notes_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the note. Should be of the form \"projects/{project_id}/notes/{note_id}\". (required)
        :param str notes_id: Part of `name`. See documentation of `projectsId`. (required)
        :param Note note: The updated note.
        :return: Note
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_note_with_http_info(projects_id, notes_id, **kwargs)
        else:
            (data) = self.update_note_with_http_info(projects_id, notes_id, **kwargs)
            return data

    def update_note_with_http_info(self, projects_id, notes_id, **kwargs):
        """
        
        Updates an existing note.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_note_with_http_info(projects_id, notes_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the note. Should be of the form \"projects/{project_id}/notes/{note_id}\". (required)
        :param str notes_id: Part of `name`. See documentation of `projectsId`. (required)
        :param Note note: The updated note.
        :return: Note
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_id', 'notes_id', 'note']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_id' is set
        if ('projects_id' not in params) or (params['projects_id'] is None):
            raise ValueError("Missing the required parameter `projects_id` when calling `update_note`")
        # verify the required parameter 'notes_id' is set
        if ('notes_id' not in params) or (params['notes_id'] is None):
            raise ValueError("Missing the required parameter `notes_id` when calling `update_note`")

        resource_path = '/v1alpha1/projects/{projectsId}/notes/{notesId}'.replace('{format}', 'json')
        path_params = {}
        if 'projects_id' in params:
            path_params['projectsId'] = params['projects_id']
        if 'notes_id' in params:
            path_params['notesId'] = params['notes_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'note' in params:
            body_params = params['note']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Note',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_occurrence(self, projects_id, occurrences_id, **kwargs):
        """
        
        Updates an existing occurrence.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_occurrence(projects_id, occurrences_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the occurrence. Should be of the form \"projects/{project_id}/occurrences/{occurrence_id}\". (required)
        :param str occurrences_id: Part of `name`. See documentation of `projectsId`. (required)
        :param Occurrence occurrence: The updated occurrence.
        :return: Occurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_occurrence_with_http_info(projects_id, occurrences_id, **kwargs)
        else:
            (data) = self.update_occurrence_with_http_info(projects_id, occurrences_id, **kwargs)
            return data

    def update_occurrence_with_http_info(self, projects_id, occurrences_id, **kwargs):
        """
        
        Updates an existing occurrence.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_occurrence_with_http_info(projects_id, occurrences_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the occurrence. Should be of the form \"projects/{project_id}/occurrences/{occurrence_id}\". (required)
        :param str occurrences_id: Part of `name`. See documentation of `projectsId`. (required)
        :param Occurrence occurrence: The updated occurrence.
        :return: Occurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_id', 'occurrences_id', 'occurrence']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_occurrence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_id' is set
        if ('projects_id' not in params) or (params['projects_id'] is None):
            raise ValueError("Missing the required parameter `projects_id` when calling `update_occurrence`")
        # verify the required parameter 'occurrences_id' is set
        if ('occurrences_id' not in params) or (params['occurrences_id'] is None):
            raise ValueError("Missing the required parameter `occurrences_id` when calling `update_occurrence`")

        resource_path = '/v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}'.replace('{format}', 'json')
        path_params = {}
        if 'projects_id' in params:
            path_params['projectsId'] = params['projects_id']
        if 'occurrences_id' in params:
            path_params['occurrencesId'] = params['occurrences_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'occurrence' in params:
            body_params = params['occurrence']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Occurrence',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_operation(self, projects_id, operations_id, **kwargs):
        """
        
        Updates an existing operation returns an error if operation  does not exist. The only valid operations are to update mark the done bit change the result.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_operation(projects_id, operations_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the Operation. Should be of the form \"projects/{project_id}/operations/{operation_id}\". (required)
        :param str operations_id: Part of `name`. See documentation of `projectsId`. (required)
        :param UpdateOperationRequest body: The request body.
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_operation_with_http_info(projects_id, operations_id, **kwargs)
        else:
            (data) = self.update_operation_with_http_info(projects_id, operations_id, **kwargs)
            return data

    def update_operation_with_http_info(self, projects_id, operations_id, **kwargs):
        """
        
        Updates an existing operation returns an error if operation  does not exist. The only valid operations are to update mark the done bit change the result.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_operation_with_http_info(projects_id, operations_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str projects_id: Part of `name`. The name of the Operation. Should be of the form \"projects/{project_id}/operations/{operation_id}\". (required)
        :param str operations_id: Part of `name`. See documentation of `projectsId`. (required)
        :param UpdateOperationRequest body: The request body.
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_id', 'operations_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_operation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_id' is set
        if ('projects_id' not in params) or (params['projects_id'] is None):
            raise ValueError("Missing the required parameter `projects_id` when calling `update_operation`")
        # verify the required parameter 'operations_id' is set
        if ('operations_id' not in params) or (params['operations_id'] is None):
            raise ValueError("Missing the required parameter `operations_id` when calling `update_operation`")

        resource_path = '/v1alpha1/projects/{projectsId}/operations/{operationsId}'.replace('{format}', 'json')
        path_params = {}
        if 'projects_id' in params:
            path_params['projectsId'] = params['projects_id']
        if 'operations_id' in params:
            path_params['operationsId'] = params['operations_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Operation',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
